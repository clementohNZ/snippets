{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended"
  ],
  "ignorePatterns": ["dist"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"]
    },
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [],
      "rules": {
        "padding-line-between-statements": [
          "error",
          {
            "blankLine": "always",
            "prev": ["const", "let", "var"],
            "next": "*"
          },
          {
            "blankLine": "any",
            "prev": ["const", "let", "var"],
            "next": ["const", "let", "var"]
          },
          {
            "blankLine": "always",
            "prev": "directive",
            "next": "*"
          },
          {
            "blankLine": "any",
            "prev": "directive",
            "next": "directive"
          }
        ],
        "comma-dangle": ["error", "always-multiline"],
        "no-case-declarations": 0,
        "no-console": [
          "error",
          {
            "allow": ["error"]
          }
        ],
        "lines-between-class-members": [
          "error",
          "always",
          {
            "exceptAfterSingleLine": false
          }
        ],
        "@typescript-eslint/member-ordering": 0,
        "@typescript-eslint/no-empty-interface": 0,
        "@typescript-eslint/no-explicit-any": 0,
        "@typescript-eslint/no-unused-vars": [
          2,
          {
            "args": "after-used",
            "argsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/no-var-requires": 0,
        "@typescript-eslint/explicit-function-return-type": ["error"],
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              // add a custom message to help explain why not to use it
              "Foo": "Don't use Foo because it is unsafe",
              // add a custom message, AND tell the plugin how to fix it
              "String": {
                "message": "Use string instead",
                "fixWith": "string"
              },
              "{}": {
                "message": "Use object instead",
                "fixWith": "object"
              },
              "Function": false
            }
          }
        ],
        "@typescript-eslint/explicit-member-accessibility": ["error"],
        "semi": ["error", "never"],
        "jsdoc/check-alignment": 2,
        "jsdoc/check-examples": 0,
        "jsdoc/check-indentation": 0,
        "jsdoc/check-param-names": 2,
        "jsdoc/check-syntax": 2,
        "jsdoc/check-tag-names": 2,
        "jsdoc/check-types": 2,
        "jsdoc/implements-on-classes": 2,
        "jsdoc/match-description": 0,
        "jsdoc/newline-after-description": 0,
        "jsdoc/no-types": 0,
        "jsdoc/no-undefined-types": 0,
        "jsdoc/require-description": 2,
        "jsdoc/require-description-complete-sentence": 0,
        "jsdoc/require-example": 0,
        "jsdoc/require-hyphen-before-param-description": 2,
        "jsdoc/require-jsdoc": [
          "error",
          {
            "require": {
              "ArrowFunctionExpression": false,
              "ClassDeclaration": false,
              "ClassExpression": false,
              "FunctionDeclaration": false,
              "FunctionExpression": false,
              "MethodDefinition": false
            }
          }
        ],
        "jsdoc/require-param": 2,
        "jsdoc/require-param-description": 2,
        "jsdoc/require-param-name": 2,
        "jsdoc/require-param-type": 2,
        "jsdoc/require-returns": 2,
        "jsdoc/require-returns-check": 2,
        "jsdoc/require-returns-description": 2,
        "jsdoc/require-returns-type": 2,
        "jsdoc/valid-types": 2,
        "quotes": ["error", "backtick"]
      }
    },
    {
      "files": ["src/stories/*.ts"],
      "rules": {
        "quotes": [2, "single"]
      }
    }
  ],
  "plugins": ["jsdoc", "@typescript-eslint", "@next/eslint-plugin-next", "react-refresh"],
  "root": true,
  "rules": {
    "react-refresh/only-export-components": [
      "warn",
      {
        "allowConstantExport": true
      }
    ]
  },
  "settings": {}
}
